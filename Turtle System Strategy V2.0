//@version=4
strategy("Turtle System Strategy V2.0",
          overlay=true,
          process_orders_on_close=true,
          calc_on_order_fills=false,
          initial_capital=100000,
          currency='USD',
          default_qty_type=strategy.percent_of_equity,
          default_qty_value=100,
          commission_type=strategy.commission.percent,
          commission_value=0)

startDate = input(title="Start Date", type=input.integer,
     defval=1, minval=1, maxval=31)
startMonth = input(title="Start Month", type=input.integer,
     defval=1, minval=1, maxval=12)
startYear = input(title="Start Year", type=input.integer,
     defval=2017, minval=1900, maxval=2100)

endDate = input(title="End Date", type=input.integer,
     defval=31, minval=1, maxval=31)
endMonth = input(title="End Month", type=input.integer,
     defval=12, minval=1, maxval=12)
endYear = input(title="End Year", type=input.integer,
     defval=2030, minval=1900, maxval=2100)

inDateRange = (time >= timestamp(syminfo.timezone, startYear,
         startMonth, startDate, 0, 0)) and
     (time < timestamp(syminfo.timezone, endYear, endMonth, endDate, 0, 0))

market_filter_type = input(title="Market Filter Type", defval="None", options=["EMA Cross", "Above 20 SMA", "None"])

coin_filter_type = input(title="Coin Filter Type", defval="None", options=["EMA Cross", "Above 20 SMA", "None"]) // New Addition

btc_fast_ema = input(50, "BTC Fast EMA Lookback") 
btc_slow_ema = input(200, "BTC Slow EMA Lookback")

coin_fast_ema = input(50, "Coin Fast EMA Lookback")                     // New Addition
coin_slow_ema = input(200, "Coin Slow EMA Lookback")                    // New Addition

//ATR Definition with EMA (built in ATR uses RMA)
pine_atr(length) =>
    trueRange = na(high[1])? high-low : max(max(high - low, abs(high - close[1])), abs(low - close[1]))
    //true range can be also calculated with tr(true)
    ema(trueRange, length)

market_index = "BINANCE:BTCUSDT"
market_index_close = security(market_index, 'D', close)
market_index_low = security(market_index, 'D', low)
market_index_high = security(market_index, 'D', high)
market_index_20_day_high = sma(market_index_high, 20)
btc_ema_50 = ema(market_index_close, btc_fast_ema)
btc_ema_200 = ema(market_index_close, btc_slow_ema)
market_index_filter = btc_ema_50 > btc_ema_200


coin_20_day_high = sma(high, 20)                                        // New Addition
coin_ema_50 = ema(close, coin_fast_ema)                                 // New Addition
coin_ema_200 = ema(close, coin_slow_ema)                                // New Addition
coin_filter = coin_ema_50 > coin_ema_200                                // New Addition


if(market_filter_type == "EMA Cross")
    market_index_filter := btc_ema_50 > btc_ema_200
else if(market_filter_type == "Above 20 SMA")
    market_index_filter := market_index_close > market_index_20_day_high //Logic Modified
else if(market_filter_type == "None")
    market_index_filter := 1

if(coin_filter_type == "EMA Cross")                                     // New Addition
    coin_filter := coin_ema_50 > coin_ema_200                           // New Addition
else if(coin_filter_type == "Above 20 SMA")                             // New Addition    
    coin_filter := close > coin_20_day_high                             // New Addition & Logic Modified
else if(coin_filter_type == "None")                                     // New Addition
    coin_filter := 1                                                    // New Addition

entry_cond_lookback = input(20, "Entry Condition Lookback")
exit_cond_lookback = input(20, "Exit Condition Lookback")

long_entry_cond = highest(high, entry_cond_lookback)[1]
long_exit_cond = lowest(low, exit_cond_lookback)[1]

//short_entry_cond = lowest(low, entry_cond_lookback)[1]
//short_exit_cond = highest(high, exit_cond_lookback)[1]

plot(long_entry_cond,color=color.blue,linewidth=3)
plot(long_exit_cond,color=color.orange,linewidth=1)

//plot(short_entry_cond,color=color.red,linewidth=3)
//plot(short_exit_cond,color=color.fuchsia,linewidth=1)

// plot(coin_ema_50,color=color.green,linewidth=1)
// plot(coin_ema_200,color=color.red,linewidth=1)

long_signal = close > long_entry_cond and market_index_filter and coin_filter //Coin Filter added
exit_long_signal = low < long_exit_cond

//short_signal = close < short_entry_cond and market_index_filter and coin_filter //Coin Filter added
//exit_short_signal = high > short_exit_cond

long_entry_price = valuewhen(long_signal and strategy.position_size<=0, high+syminfo.mintick, 0)
long_exit_price = valuewhen(exit_long_signal and strategy.position_size>0, low-syminfo.mintick, 0)

short_entry_price = valuewhen(short_signal and strategy.position_size>=0, low-syminfo.mintick, 0)
//short_exit_price = valuewhen(exit_short_signal and strategy.position_size<0, high+syminfo.mintick, 0)

long_SL = valuewhen(not na(long_entry_price) and strategy.position_size<=0, close-(2*pine_atr(20)), 0)
//short_SL = valuewhen(not na(short_entry_price) and strategy.position_size>=0, close+(2*pine_atr(20)), 0)


TP_on_off = input(defval='Off', title="Profit Target Toggle", type=input.string, options=['On', 'Off'])

Profit_ATR_Lookback = input(100, "Profit ATR Lookback", type = input.integer, minval = 1, maxval = 5000)
ATR_Multiple = input(2, "Profit ATR Multiple", type = input.integer, minval = 1, maxval = 100)

// Buy profit price
buy_profit_target = valuewhen(not na(long_entry_price), long_entry_price+ATR_Multiple*pine_atr(Profit_ATR_Lookback), 0)

// Sell profit price
//sell_profit_target = valuewhen(not na(short_entry_price), short_entry_price-ATR_Multiple*pine_atr(Profit_ATR_Lookback), 0)


// Position size calculations for max equity risk (determining number of shares to buy/sell) //

max_equity_risk = input(2, "Max Equity Risk (%)", type=input.float, minval=1, maxval=100)

// Long pos size
long_pos_size = ((strategy.equity*(max_equity_risk/100))/valuewhen(not na(long_signal), (high+syminfo.mintick)-(close-(2*pine_atr(20))), 0)) < strategy.equity/close ? ((strategy.equity*(max_equity_risk/100))/valuewhen(not na(long_signal), (high+syminfo.mintick)-(close-(2*pine_atr(20))), 0)) : strategy.equity/close

// Short pos size
//short_pos_size = ((strategy.equity*(max_equity_risk/100))/valuewhen(not na(short_signal), (close+(2*pine_atr(20)))-(low-syminfo.mintick), 0)) < strategy.equity/close ? ((strategy.equity*(max_equity_risk/100))/valuewhen(not na(short_signal), (close+(2*pine_atr(20)))-(low-syminfo.mintick), 0)) : strategy.equity/close


if(TP_on_off=="On")
    if(inDateRange and long_signal)
        strategy.entry(id="Long Entry", long=strategy.long, qty=long_pos_size, stop=long_entry_price, comment="Long Entry")
    
    strategy.exit(id="Exit Long", from_entry="Long Entry", qty_percent=100, limit=buy_profit_target, stop=long_SL, comment="Exit Long")
    
    strategy.close(id="Long Entry", when=exit_long_signal, qty_percent=100, comment="Long Close")


if(TP_on_off=="Off")
    if(inDateRange and long_signal)
        strategy.entry(id="Long Entry", long=strategy.long, qty=long_pos_size, stop=long_entry_price, comment="Long Entry")
    
    strategy.exit(id="Exit Long", from_entry="Long Entry", qty_percent=100, stop=long_SL, comment="Exit Long")
    
    strategy.close(id="Long Entry", when=exit_long_signal, qty_percent=100, comment="Long Close")
